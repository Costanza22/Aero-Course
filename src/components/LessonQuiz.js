import React, { useState } from 'react';
import './LessonQuiz.css';

// Banco de quest√µes por li√ß√£o
const quizDatabase = {
  // M√≥dulo 1 - Fundamentos da Aeron√°utica
  '1-0': [ // Hist√≥ria da Avia√ß√£o
    {
      question: 'Quem √© considerado o pai da avia√ß√£o no Brasil?',
      options: ['Santos Dumont', 'Irm√£os Wright', 'Alberto Santos', 'Alberto Dumont'],
      correct: 0,
      explanation: 'Santos Dumont √© considerado o pai da avia√ß√£o no Brasil, tendo realizado o primeiro voo p√∫blico em Paris em 1906.'
    },
    {
      question: 'Em que ano ocorreu o primeiro voo dos Irm√£os Wright?',
      options: ['1900', '1903', '1906', '1910'],
      correct: 1,
      explanation: 'Os Irm√£os Wright realizaram o primeiro voo controlado e motorizado em 17 de dezembro de 1903.'
    },
    {
      question: 'Qual foi a primeira aeronave a realizar um voo p√∫blico?',
      options: ['14-Bis', 'Flyer I', 'Demoiselle', 'Wright Flyer'],
      correct: 0,
      explanation: 'O 14-Bis, pilotado por Santos Dumont, foi a primeira aeronave a realizar um voo p√∫blico em 1906.'
    }
  ],
  '1-1': [ // Princ√≠pios de Voo
    {
      question: 'Qual das seguintes for√ßas atua verticalmente para baixo em uma aeronave?',
      options: ['Sustenta√ß√£o', 'Peso', 'Arrasto', 'Tra√ß√£o'],
      correct: 1,
      explanation: 'O peso √© a for√ßa gravitacional que atua verticalmente para baixo, sempre em dire√ß√£o ao centro da Terra.'
    },
    {
      question: 'Qual for√ßa √© respons√°vel por manter a aeronave no ar?',
      options: ['Peso', 'Sustenta√ß√£o', 'Arrasto', 'Tra√ß√£o'],
      correct: 1,
      explanation: 'A sustenta√ß√£o √© a for√ßa aerodin√¢mica que atua perpendicularmente ao vento relativo, mantendo a aeronave no ar.'
    },
    {
      question: 'Qual das for√ßas atua na dire√ß√£o oposta ao movimento da aeronave?',
      options: ['Sustenta√ß√£o', 'Peso', 'Arrasto', 'Tra√ß√£o'],
      correct: 2,
      explanation: 'O arrasto √© a for√ßa de resist√™ncia que atua na dire√ß√£o oposta ao movimento da aeronave.'
    }
  ],
  '1-2': [ // Aerodin√¢mica B√°sica
    {
      question: 'O que √© o perfil aerodin√¢mico?',
      options: ['A forma da asa vista de frente', 'A forma da asa vista de lado', 'O comprimento da asa', 'A espessura da asa'],
      correct: 1,
      explanation: 'O perfil aerodin√¢mico √© a forma da asa vista de lado, que determina as caracter√≠sticas de sustenta√ß√£o e arrasto.'
    },
    {
      question: 'O que acontece com a press√£o do ar quando ele passa sobre uma asa?',
      options: ['Aumenta', 'Diminui', 'Permanece igual', 'Varia aleatoriamente'],
      correct: 1,
      explanation: 'Quando o ar passa sobre uma asa, a press√£o diminui na superf√≠cie superior, criando sustenta√ß√£o.'
    },
    {
      question: 'Qual √© o √¢ngulo entre a corda da asa e o vento relativo?',
      options: ['√Çngulo de ataque', '√Çngulo de incid√™ncia', '√Çngulo de diedro', '√Çngulo de enflechamento'],
      correct: 0,
      explanation: 'O √¢ngulo de ataque √© o √¢ngulo entre a corda da asa e o vento relativo.'
    }
  ],
  '1-3': [ // Controles de Voo
    {
      question: 'Qual superf√≠cie de controle √© respons√°vel pelo movimento de rolagem?',
      options: ['Leme', 'Profundor', 'Ailerons', 'Flaps'],
      correct: 2,
      explanation: 'Os ailerons s√£o superf√≠cies de controle localizadas nas extremidades das asas, respons√°veis pelo movimento de rolagem.'
    },
    {
      question: 'Qual superf√≠cie de controle √© respons√°vel pelo movimento de guinada?',
      options: ['Leme', 'Profundor', 'Ailerons', 'Flaps'],
      correct: 0,
      explanation: 'O leme √© a superf√≠cie de controle vertical na cauda, respons√°vel pelo movimento de guinada.'
    },
    {
      question: 'Qual superf√≠cie de controle √© respons√°vel pelo movimento de arfagem?',
      options: ['Leme', 'Profundor', 'Ailerons', 'Flaps'],
      correct: 1,
      explanation: 'O profundor √© a superf√≠cie de controle horizontal na cauda, respons√°vel pelo movimento de arfagem.'
    }
  ],
  // M√≥dulo 2 - Sistemas de Aeronaves
  '2-0': [ // Sistema de Propuls√£o
    {
      question: 'Qual tipo de motor √© mais comum em aeronaves pequenas?',
      options: ['Motor a jato', 'Motor a pist√£o', 'Motor turboprop', 'Motor el√©trico'],
      correct: 1,
      explanation: 'Motores a pist√£o s√£o mais comuns em aeronaves pequenas devido ao baixo custo e simplicidade.'
    },
    {
      question: 'O que √© a h√©lice de passo vari√°vel?',
      options: ['H√©lice que muda de tamanho', 'H√©lice que muda de √¢ngulo', 'H√©lice que muda de velocidade', 'H√©lice que muda de dire√ß√£o'],
      correct: 1,
      explanation: 'A h√©lice de passo vari√°vel permite ajustar o √¢ngulo das p√°s para otimizar a efici√™ncia em diferentes condi√ß√µes de voo.'
    },
    {
      question: 'Qual combust√≠vel √© usado em motores a pist√£o de aeronaves?',
      options: ['Gasolina 100LL', 'Diesel', 'Querosene', 'Etanol'],
      correct: 0,
      explanation: 'A gasolina 100LL (Low Lead) √© o combust√≠vel padr√£o para motores a pist√£o de aeronaves.'
    }
  ],
  '2-1': [ // Sistema El√©trico
    {
      question: 'Qual √© a tens√£o padr√£o do sistema el√©trico em aeronaves pequenas?',
      options: ['12V', '24V', '28V', '48V'],
      correct: 2,
      explanation: 'A tens√£o padr√£o do sistema el√©trico em aeronaves pequenas √© 28V DC.'
    },
    {
      question: 'O que √© o alternador em uma aeronave?',
      options: ['Gerador de energia el√©trica', 'Motor el√©trico', 'Bateria', 'Inversor'],
      correct: 0,
      explanation: 'O alternador √© o gerador de energia el√©trica que recarrega a bateria e alimenta os sistemas el√©tricos.'
    },
    {
      question: 'Qual componente fornece energia de emerg√™ncia?',
      options: ['Alternador', 'Bateria', 'Inversor', 'Regulador'],
      correct: 1,
      explanation: 'A bateria fornece energia de emerg√™ncia quando o alternador falha.'
    }
  ],
  '2-2': [ // Sistema Hidr√°ulico
    {
      question: 'Qual fluido √© usado no sistema hidr√°ulico?',
      options: ['√Ågua', '√ìleo hidr√°ulico', 'Freio l√≠quido', 'Combust√≠vel'],
      correct: 1,
      explanation: 'O √≥leo hidr√°ulico √© o fluido usado no sistema hidr√°ulico para transmitir for√ßa.'
    },
    {
      question: 'Qual sistema √© acionado hidraulicamente?',
      options: ['Sistema el√©trico', 'Trem de pouso', 'Sistema de combust√≠vel', 'Sistema de oxig√™nio'],
      correct: 1,
      explanation: 'O trem de pouso √© um dos sistemas acionados hidraulicamente em muitas aeronaves.'
    },
    {
      question: 'O que √© uma bomba hidr√°ulica?',
      options: ['Reservat√≥rio de fluido', 'Gerador de press√£o', 'V√°lvula de controle', 'Cilindro hidr√°ulico'],
      correct: 1,
      explanation: 'A bomba hidr√°ulica √© o componente que gera press√£o no sistema hidr√°ulico.'
    }
  ],
  '2-3': [ // Sistema de Combust√≠vel
    {
      question: 'Qual √© a fun√ß√£o principal do sistema de combust√≠vel?',
      options: ['Armazenar combust√≠vel', 'Distribuir combust√≠vel', 'Filtrar combust√≠vel', 'Todas as anteriores'],
      correct: 3,
      explanation: 'O sistema de combust√≠vel tem m√∫ltiplas fun√ß√µes: armazenar, distribuir e filtrar o combust√≠vel.'
    },
    {
      question: 'O que √© o seletor de tanques?',
      options: ['V√°lvula de drenagem', 'V√°lvula de sele√ß√£o', 'Bomba de combust√≠vel', 'Filtro de combust√≠vel'],
      correct: 1,
      explanation: 'O seletor de tanques √© uma v√°lvula que permite escolher de qual tanque o combust√≠vel ser√° consumido.'
    },
    {
      question: 'Por que √© importante drenar o combust√≠vel antes do voo?',
      options: ['Para economizar', 'Para verificar contamina√ß√£o', 'Para reduzir peso', 'Para limpar o sistema'],
      correct: 1,
      explanation: 'Drenar o combust√≠vel antes do voo √© importante para verificar se h√° contamina√ß√£o por √°gua ou sedimentos.'
    }
  ]
};

const LessonQuiz = ({ moduleId, lessonIndex, onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [quizCompleted, setQuizCompleted] = useState(false);

  const quizKey = `${moduleId}-${lessonIndex}`;
  const questions = quizDatabase[quizKey] || [];

  if (questions.length === 0) {
    return (
      <div className="lesson-quiz">
        <div className="quiz-header">
          <h3>Quiz da Li√ß√£o</h3>
          <p>Nenhum quiz dispon√≠vel para esta li√ß√£o.</p>
        </div>
      </div>
    );
  }

  const currentQ = questions[currentQuestion];

  const handleAnswerSelect = (answerIndex) => {
    if (showResult) return;
    setSelectedAnswer(answerIndex);
  };

  const handleSubmit = () => {
    if (selectedAnswer === null) return;
    
    const isCorrect = selectedAnswer === currentQ.correct;
    if (isCorrect) {
      setScore(score + 1);
    }
    
    setShowResult(true);
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowResult(false);
    } else {
      // Quiz completo
      const finalScore = selectedAnswer === currentQ.correct ? score + 1 : score;
      const percentage = (finalScore / questions.length) * 100;
      setQuizCompleted(true);
      onComplete && onComplete(percentage, finalScore, questions.length);
    }
  };

  const handleRetry = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setQuizCompleted(false);
  };

  if (quizCompleted) {
    const finalScore = selectedAnswer === currentQ.correct ? score + 1 : score;
    const percentage = (finalScore / questions.length) * 100;
    const passed = percentage >= 70;

    return (
      <div className="lesson-quiz">
        <div className="quiz-results">
          <h3>üéØ Resultado do Quiz</h3>
          <div className={`score-display ${passed ? 'passed' : 'failed'}`}>
            <div className="score-percentage">{percentage.toFixed(0)}%</div>
            <div className="score-text">
              {finalScore} de {questions.length} acertos
            </div>
            <div className="score-status">
              {passed ? '‚úÖ Aprovado!' : '‚ùå Reprovado'}
            </div>
          </div>
          {passed && (
            <div className="congratulations">
              <p>üéâ Parab√©ns! Voc√™ demonstrou conhecimento nesta li√ß√£o!</p>
            </div>
          )}
          {!passed && (
            <div className="retry-message">
              <p>üìö Continue estudando e tente novamente!</p>
            </div>
          )}
          <button className="retry-btn" onClick={handleRetry}>
            üîÑ Tentar Novamente
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="lesson-quiz">
      <div className="quiz-header">
        <h3>üéØ Quiz da Li√ß√£o</h3>
        <div className="quiz-progress">
          Quest√£o {currentQuestion + 1} de {questions.length}
        </div>
      </div>
      
      <div className="quiz-question">
        <h4>{currentQ.question}</h4>
        <div className="quiz-options">
          {currentQ.options.map((option, index) => (
            <button
              key={index}
              className={`quiz-option ${
                selectedAnswer === index ? 'selected' : ''
              } ${
                showResult
                  ? index === currentQ.correct
                    ? 'correct'
                    : selectedAnswer === index
                    ? 'incorrect'
                    : ''
                  : ''
              }`}
              onClick={() => handleAnswerSelect(index)}
              disabled={showResult}
            >
              {String.fromCharCode(65 + index)}. {option}
            </button>
          ))}
        </div>
      </div>

      {showResult && (
        <div className="quiz-feedback">
          <div className={`feedback-message ${selectedAnswer === currentQ.correct ? 'correct' : 'incorrect'}`}>
            {selectedAnswer === currentQ.correct ? '‚úÖ Correto!' : '‚ùå Incorreto!'}
          </div>
          <div className="explanation">
            <strong>Explica√ß√£o:</strong> {currentQ.explanation}
          </div>
        </div>
      )}

      <div className="quiz-controls">
        {!showResult ? (
          <button
            className="submit-btn"
            onClick={handleSubmit}
            disabled={selectedAnswer === null}
          >
            Responder
          </button>
        ) : (
          <button className="next-btn" onClick={handleNext}>
            {currentQuestion < questions.length - 1 ? 'Pr√≥xima Quest√£o' : 'Ver Resultado'}
          </button>
        )}
      </div>
    </div>
  );
};

export default LessonQuiz; 